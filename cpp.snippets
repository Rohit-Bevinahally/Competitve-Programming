# Data Structures :

# PBDS :
snippet pbds
// Policy Based data structures : 
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

template<class T, class U = null_type, class cmp = less<T>> using oset =
tree<T,U,cmp,rb_tree_tag,tree_order_statistics_node_update>;
#define ook order_of_key
#define fbo find_by_order

endsnippet

# Priority Queue :
snippet pq
template<class T> using pq = priority_queue<T>;
template<class T> using min_pq = priority_queue<T, vector<T>, greater<T>>;

endsnippet

# Modular arithmetic :
snippet mint 
struct mint{
	ll v; explicit operator ll() const { return v; }
	mint() { v = 0; }
	mint(ll _v) {
		v = (-mod < _v && _v < mod) ? _v : _v % mod;
		if (v < 0) v += mod; }
	friend bool operator==(const mint& a, const mint& b) {
		return a.v == b.v; }
	friend bool operator!=(const mint& a, const mint& b) {
		return !(a == b); }
	friend bool operator<(const mint& a, const mint& b) {
		return a.v < b.v; }
	mint& operator+=(const mint& m) {
		if ((v += m.v) >= mod) v -= mod;
		return *this; }
	mint& operator-=(const mint& m) {
		if ((v -= m.v) < 0) v += mod;
		return *this; }
	mint& operator*=(const mint& m) {
		v = v*m.v%mod; return *this; }
	mint& operator/=(const mint& m) { return (*this) *= inv(m); }
	mint& operator++() { return *this += 1; }
	mint& operator--() { return *this -= 1; }
    mint operator++(int) { mint temp; temp.v = v++; return temp; }
    mint operator--(int) { mint temp; temp.v = v--; return temp; }
	mint operator-() const { return mint(-v); }
	friend mint operator+(mint a, const mint& b) { return a += b; }
	friend mint operator-(mint a, const mint& b) { return a -= b; }
	friend mint operator*(mint a, const mint& b) { return a *= b; }
	friend mint operator/(mint a, const mint& b) { return a /= b; }
    friend mint pow(mint a, ll p) {
		mint ans = 1; assert(p >= 0);
		for (; p; p /= 2, a *= a) if (p&1) ans *= a;
		return ans; }
	friend mint inv(const mint& a) { assert(a.v != 0);
		return pow(a,mod-2); }
	friend ostream& operator<<(ostream& os, const mint& m) {
        os << m.v; return os; }
    friend istream& operator>>(istream& is, mint& m) {
        ll x; is >> x;
        m.v = x;
        return is; }
};

vector<mint> fac,invfac;
void prefac(int N){
    fac.resize(N),invfac.resize(N);
    fac[0] = 1;
    for(int i = 1; i < N; i++) fac[i] = fac[i-1]*i;
    invfac[N-1] = inv(fac[N-1]);
    for(int i = N-2; i >= 0; i--) invfac[i] = invfac[i+1]*(i+1);
}
mint ncr(int n,int r){
    assert(n >= r and n < (int)fac.size());
    return fac[n]*invfac[n-r]*invfac[r];
}

endsnippet

# Sparse Table :
snippet sparse
template <typename T, class F = function<T(const T&, const T&)>>
class SparseTable {
 public:
  int n,K;
  vector<vector<T>> st;
  F comp;
  SparseTable(const vector<T>& a, const F& f) : comp(f) {
    n = a.size();
    K = 32 - __builtin_clz(n);
    st.resize(K);
    st[0] = a;
    for (int j = 1; j < K; j++) {
      st[j].resize(n - (1 << j) + 1);
      for (int i = 0; i <= n - (1 << j); i++) {
        st[j][i] = comp(st[j - 1][i], st[j - 1][i + (1 << (j - 1))]);
      }
    }
  }
  T query(int l, int r) const {
    assert(0 <= l and l <= r and r <= n - 1);
    int lg = 32 - __builtin_clz(r - l + 1) - 1;
    return comp(st[lg][l], st[lg][r - (1 << lg) + 1]);
  }
};

endsnippet

# DSU :
snippet dsu
struct DSU{
    vector<int> e; int comps;
    DSU(int n) { e = vector<int>(n,-1); comps = n;}
    int get(int x) { return e[x] < 0 ? x : e[x] = get(e[x]);}
    bool same(int a,int b) { return get(a) == get(b);}
    int csize(int x) { return -e[get(x)];}
    bool join(int x,int y){
        x = get(x),y = get(y);
        if(x == y) return false;
        if(e[x] > e[y]) swap(x,y);
        e[x] += e[y];
        e[y] = x;
		comps--;
		return true;
    }
};

endsnippet

# Segment Tree :
snippet seg
template<typename T,class F = function<T(const T&,const T&)>>
class Segtree {
    public :
        int n; vector<T> t;
        F comp;
        T dv;
        Segtree(const vector<T>& a,const T val,const F& f) : comp(f){
            dv = val; n = sz(a) + 1; t.assign(2*n,dv);
            for(int i = 1; i < n; i++) upd(i,a[i-1]);
        }
        void pull(int p) { t[p] = comp(t[2*p],t[2*p+1]); }
        void upd(int p,T val){
            for(t[p += n] = val,p /= 2;p;p /= 2) pull(p);}
        T rq(int l,int r) {
            T right = dv,left = dv;
            for(l += n,r += n+1; l < r; l /= 2, r /= 2){
                if(l & 1) left = comp(left,t[l++]);
                if(r & 1) right = comp(t[--r],right);
            }
            return comp(left,right);
        }
};

endsnippet

# Segment Tree with Lazy Propogation and RURQ :
snippet lazy
class Segtree {
    public:
        static const ll EMPTY = ${1:0};
        
        static ll operation(ll a, ll b) {
            return ${2:a + b;}
        }

        struct node {
            ll op = EMPTY;
			${3:ll val = 0;}
            void apply(ll v, ll l, ll r) {
                op = operation(op,v);
				${4:val = operation(val,v);}
            }
        };

        node combine(node a, node b) {
			node res;
			$5
			return res;
        }

        int n;
        vector<node> tree;
        
        void push(int x, int tl, int tr) {
            if(tl == tr or tree[x].op == EMPTY) return;
            int m = (tl + tr)/2;
            tree[2*x].apply(tree[x].op,tl,m);
            tree[2*x+1].apply(tree[x].op,m+1,tr);
            tree[x].op = EMPTY;
        }

        void pull(int x) { 
            tree[x] = combine(tree[2*x],tree[2*x+1]);
        }

        void modify(int x, int tl, int tr, int l, int r, ll v) {
            if(tr < l or tl > r) return;
            if(l <= tl and tr <= r) {
                tree[x].apply(v,tl,tr);
                return;
            }
            push(x,tl,tr);
            int m = (tl + tr)/2;
            modify(2*x,tl,m,l,r,v);
            modify(2*x+1,m+1,tr,l,r,v);
            pull(x);
        }

        node get(int x, int tl, int tr, int l, int r) {
            if(tr < l or tl > r) return node();
            if(l <= tl and tr <= r) {
                return tree[x];
            }
            push(x,tl,tr);
            int m = (tl + tr)/2;
            node left = get(2*x,tl,m,l,r);
            node right = get(2*x+1,m+1,tr,l,r);
            pull(x);
            return combine(left,right);
        }

        void modify(int l,int r,ll v) {
            assert(1 <= l and r <= n);
            modify(1,1,n,l,r,v);
        }

        node get(int l, int r) {
            assert(1 <= l and r <= n);
            return get(1,1,n,l,r);
        }

        node get(int p) { return get(p,p); }

        Segtree(int _n) : n(_n) {
            assert(n > 0);
            tree.resize(4*n);
        }
        template<typename T>
        Segtree(const vector<T> &v) {
            n = v.size();
            assert(n > 0);
            tree.resize(4*n);
            build(1,1,n,v);
        }
        template<typename T>
        void build(int x, int l, int r, const vector<T> &v) {
            if(l == r) {
                tree[x].apply(v[l-1],l,r);
                return;
            }
            int m = (l + r)/2;
            build(2*x,l,m,v);
            build(2*x+1,m+1,r,v);
            pull(x);
        }
};

endsnippet

# Fenwick Tree : 
snippet fenwick
template<class T>
struct Fenwick {
    int n;
    vector<T> val;
    Fenwick(int N) : n(N) { val.resize(N+1); }
    void upd(int pos,T x) {
        for(; pos <= n; pos += pos&-pos) val[pos] += x;
    }
    T sum(int pos) {
        T res = 0;
        for(; pos; pos -= pos&-pos) res += val[pos];
        return res;
    }
    T query(int l,int r) { return sum(r) - sum(l-1); }
};

endsnippet

# Tree with LCA,binary lifting and Euler tour :
snippet tree
class Tree {
    public:
        int n,L,t,root;
        vector<vector<int>> up,adj;
        vector<int> d,st,en,order;

        void init(){
            order.clear();
            d = st = en = vector<int>(n);
            L = ceil(log2(n));
            up.resize(n,vector<int>(L+1));
            t = 1;
            dfs(root,root);
        }
        Tree(int N,vector<vector<int>> adj,int root = 0) : n(N),root(root),adj(adj){ init(); }
        Tree(int N,vector<int> p) : n(N){
            assert(N == (int)p.size());
            adj.resize(n);
            for(int i = 0; i < N; i++){
                if(p[i] == -1) root = i;
                else{
                    adj[i].push_back(p[i]);
                    adj[p[i]].push_back(i);
                }
            }
            init();
        }
        void dfs(int s,int e){
            order.push_back(s);
            st[s] = t++;
            for(int i = 1; i <= L; i++)
                up[s][i] = up[up[s][i-1]][i-1];
            
            for(auto u : adj[s]){
                if(u == e) continue;
                d[u] = d[up[u][0] = s] + 1;
                dfs(u,s);
            }
            en[s] = t-1;
        }
        bool anc(int a,int b){ return st[a] <= st[b] and en[a] >= en[b]; }
        int jump(int x,int k){
            for(int i = 0; i <= L; i++) if(k >> i & 1){
                x = up[x][i];
            }
            return x;
        }
        int lca(int a,int b){
            if(d[a] < d[b]) swap(a,b);
            a = jump(a,d[a] - d[b]);
            if(a == b) return a;
            for(int i = L; i >= 0; i--){
                int na = up[a][i],nb = up[b][i];
                if(na != nb) a = na,b = nb;
            }
            return up[a][0];
        }
        int dist(int a,int b){ return d[a] + d[b] - 2*d[lca(a,b)]; }
};

endsnippet

# DP Optimisation using CHT : 
snippet cht
/* 
Convex Hull Trick :
Add lines of the form : L(k,m) = kx + m.
Evaluate max at a point x across all lines.
Source : https://github.com/kth-competitive-programming/kactl/blob/main/content/data-structures/LineContainer.h 
*/

struct Line {
	mutable ll k, m, p;
	bool operator<(const Line& o) const { return k < o.k; }
	bool operator<(ll x) const { return p < x; }
};

struct LineContainer : multiset<Line, less<>> {
	// (for doubles, use inf = 1/.0, div(a,b) = a/b)
	static const ll inf = LLONG_MAX;
	ll div(ll a, ll b) { // floored division
		return a / b - ((a ^ b) < 0 && a % b); }
	bool isect(iterator x, iterator y) {
		if (y == end()) return x->p = inf, 0;
		if (x->k == y->k) x->p = x->m > y->m ? inf : -inf;
		else x->p = div(y->m - x->m, x->k - y->k);
		return x->p >= y->p;
	}
	void add(ll k, ll m) {
		auto z = insert({k, m, 0}), y = z++, x = y;
		while (isect(y, z)) z = erase(z);
		if (x != begin() && isect(--x, y)) isect(x, y = erase(y));
		while ((y = x) != begin() && (--x)->p >= y->p)
			isect(x, erase(y));
	}
	ll eval(ll x) {
		assert(!empty());
		auto l = *lower_bound(x);
		return l.k * x + l.m;
	}
};

endsnippet

# Geometry :
snippet geo
/* Geometry Template :  
Source : https://github.com/kth-competitive-programming/kactl/blob/main/content/geometry/ */

template <class T> int sgn(T x) { return (x > 0) - (x < 0); }
template<class T>
struct Point {
	typedef Point P;
	T x, y;
	explicit Point(T x=0, T y=0) : x(x), y(y) {}
	bool operator<(P p) const { return tie(x,y) < tie(p.x,p.y); }
	bool operator==(P p) const { return tie(x,y)==tie(p.x,p.y); }
	P operator+(P p) const { return P(x+p.x, y+p.y); }
	P operator-(P p) const { return P(x-p.x, y-p.y); }
	P operator*(T d) const { return P(x*d, y*d); }
	P operator/(T d) const { return P(x/d, y/d); }
	T dot(P p) const { return x*p.x + y*p.y; }
	T cross(P p) const { return x*p.y - y*p.x; }
	T cross(P a, P b) const { return (a-*this).cross(b-*this); }
	T dist2() const { return x*x + y*y; }
	double dist() const { return sqrt((double)dist2()); }
	// angle to x-axis in interval [-pi, pi]
	double angle() const { return atan2(y, x); }
	P unit() const { return *this/dist(); } // makes dist()=1
	P perp() const { return P(-y, x); } // rotates +90 degrees
	P normal() const { return perp().unit(); }
	// returns point rotated 'a' radians ccw around the origin
	P rotate(double a) const {
		return P(x*cos(a)-y*sin(a),x*sin(a)+y*cos(a)); }
	friend ostream& operator<<(ostream& os, P p) {
		return os << "(" << p.x << "," << p.y << ")"; }
};

template<class P> bool onSegment(P s, P e, P p) {
	return p.cross(s, e) == 0 && (s - p).dot(e - p) <= 0;
}

template<class P>
int sideOf(P s, P e, P p) { return sgn(s.cross(e, p)); }

template<class P>
int sideOf(const P& s, const P& e, const P& p, double eps) {
	auto a = (e-s).cross(p-s);
	double l = (e-s).dist()*eps;
	return (a > l) - (a < -l);
}

typedef Point<ll> P;

vector<P> convexHull(vector<P> pts) {
	if (sz(pts) <= 1) return pts;
	sort(all(pts));
	vector<P> h(sz(pts)+1);
	int s = 0, t = 0;
	for (int it = 2; it--; s = --t, reverse(all(pts)))
		for (P p : pts) {
			while (t >= s + 2 && h[t-2].cross(h[t-1], p) <= 0) t--;
			h[t++] = p;
		}
	return {h.begin(), h.begin() + t - (t == 2 && h[0] == h[1])};
}

bool inHull(const vector<P>& l, P p, bool strict = true) {
	int a = 1, b = sz(l) - 1, r = !strict;
	if (sz(l) < 3) return r && onSegment(l[0], l.back(), p);
	if (sideOf(l[0], l[a], l[b]) > 0) swap(a, b);
	if (sideOf(l[0], l[a], p) >= r || sideOf(l[0], l[b], p)<= -r)
		return false;
	while (abs(a - b) > 1) {
		int c = (a + b) / 2;
		(sideOf(l[0], l[c], p) > 0 ? b : a) = c;
	}
	return sgn(l[a].cross(l[b], p)) < r;
}

endsnippet

# Suffix Array with LCP : 
snippet suffarr
class SuffixArray {
    public:
        string s;
        int n;
        vector<int> p,c,lcp;

        SuffixArray(string _s) : s(_s) {
            s += "#";
            n = s.size();
            p = c = lcp = vector<int>(n);
            build();
        }
        void build() {
            iota(p.begin(),p.end(),0);
            sort(p.begin(),p.end(),[&](int i,int j){
                    return s[i] < s[j]; });
            c[p[0]] = 0;
            for(int i = 1; i < n; i++){
                c[p[i]] = c[p[i-1]];
                if(s[p[i]] != s[p[i-1]]) c[p[i]]++;
            }
            vector<int> np(n),nc(n);
            for(int k = 0; (1 << k) < n; k++){
                int sh = (1 << k);
                for(int i = 0; i < n; i++){
                    np[i] = (p[i] - sh + n) % n;
                }
                vector<int> cnt(n);
                for(int i = 0; i < n; i++) cnt[c[np[i]]]++;
                for(int i = 1; i < n; i++) cnt[i] += cnt[i-1];
                for(int i = n-1; i >= 0; i--){
                    p[--cnt[c[np[i]]]] = np[i];
                }
                nc[p[0]] = 0;
                for(int i = 1; i < n; i++){
                    nc[p[i]] = nc[p[i-1]];
                    pair<int,int> cur = {c[p[i]],c[(p[i]+sh)%n]};
                    pair<int,int> nxt = {c[p[i-1]],c[(p[i-1]+sh)%n]};
                    if(cur != nxt) nc[p[i]]++;
                }
                swap(c,nc);
            }
        }

        vector<int> LCP() {
			int k = 0;
            for(int i = 0; i < n - 1; i++) {
                int j = p[c[i] - 1];
                while(s[i + k] == s[j + k]) k++;
                lcp[c[i] - 1] = k;
                k = max(0,k-1);
            }
			return lcp;
        }
};

endsnippet
# ------------------------------------------------------------------------------------------------------------------------

# Algorithm implementations : 

#Kruskal : 
snippet kruskal
template<class T> T kruskal(int N,vector<pair<T,pi>> edges){
    sort(all(edges));
    T ans = 0; DSU D(N);
    trv(e,edges) if(D.join(e.s.f,e.s.s)) ans += e.f;
    return ans;
}

endsnippet

# Linear Diophantine Equation Solver : 
snippet dio
// General Solution : {x0 + k(b/g), y0 - k(a/g)}
template<class T>
T extended_euclidean(T a,T b,T& x,T& y) {
    if(!b) {
        x = 1,y = 0;
        return a;
    }
    T x1,y1;
    T d = extended_euclidean(b,a % b,x1,y1);
    x = y1;
    y = x1 - y1 * (a/b);
    return d;
}

template<class T>
bool base_solution(T a,T b,T c,T& x,T& y,T& g) {
    g = extended_euclidean(abs(a),abs(b),x,y);
    if(c % g) return false;
    x *= c/g;
    y *= c/g;
    if(a < 0) x = -x;
    if(b < 0) y = -y;
    return true;
}
endsnippet

# Strongly Connected Components : 
snippet scc
vector<vector<int>> adj,radj;

class SCC {
    public:
        int n,comps;
        vector<int> order,vis,comp;
        SCC(int n) : n(n) {
            vis.resize(n);
            comp = vis;
            comps = 0;
            makeSCC();
        }
        void dfs(int s) {
            vis[s] = 1;
            for(auto u : adj[s]) {
                if(!vis[u]) dfs(u);
            }
            order.push_back(s);
        }
        void dfs1(int s) {
            comp[s] = comps;
            vis[s] = 1;
            for(auto u : radj[s]) {
                if(!vis[u]) dfs1(u);
            }
        }
        void makeSCC() {
            for(int i = 0; i < n; i++) if(!vis[i]) dfs(i);
            reverse(begin(order),end(order));
            vis.assign(n,0);
            for(auto u : order)  if(!vis[u]) {
                dfs1(u);
                comps++;
            }
        }
};

endsnippet

# 2SAT :
snippet 2sat
class _2SAT {
    public:
        int n;
        vector<bool> assignment;
        _2SAT(int N) : n(2*N) {
            assignment.resize(N);
            adj.assign(n,{});
            radj.assign(n,{});
        }
        bool solve_2SAT() {
            SCC s(n);
            for (int i = 0; i < n; i += 2) {
                if (s.comp[i] == s.comp[i + 1]) return false;
                assignment[i/2] = s.comp[i] > s.comp[i + 1];
            }
            return true;
        }
        void add_disjunction(int a, bool na, int b, bool nb){
            a = 2*a ^ na;
            b = 2*b ^ nb;
            int neg_a = a ^ 1;
            int neg_b = b ^ 1;
            adj[neg_a].push_back(b);
            radj[b].push_back(neg_a);
            adj[neg_b].push_back(a);
            radj[a].push_back(neg_b);
        }
};

endsnippet

# Max Flow :
snippet dinic
template<class F> struct Dinic {
    struct Edge { int to,rev; F cap; };
    int n;
    vector<vector<Edge>> adj;
    vector<int> lvl,ptr,prv;
    Dinic(int N) : n(N),adj(n),lvl(n),ptr(n){}
    pair<int,int> addEdge(int u,int v,F cap,F rcap = 0) {
        assert(min(cap,rcap) >= 0);
        adj[u].push_back({v,sz(adj[v]),cap});
        adj[v].push_back({u,sz(adj[u])-1,rcap});
        return {u,sz(adj[u])-1};
    }
    F edgeFlow(int u,int id) {
        const Edge& e = adj[u][id];
        return adj[e.to][e.rev].cap;
    }
    bool bfs(int s,int t) {
        lvl = ptr = vector<int>(n);
        lvl[s] = 1;
        queue<int> q({s});
        while(!q.empty()) {
            auto u = q.front(); q.pop();
            for(auto e : adj[u]) if(e.cap and !lvl[e.to]) {
                q.push(e.to);
                lvl[e.to] = lvl[u] + 1;
                if(e.to == t) return true;
            }
        }
        return false;
    }
    F dfs(int v,int t,F f) {
        if(v == t or !f) return f;
        for(int& i = ptr[v]; i < sz(adj[v]); i++) {
            Edge& e = adj[v][i];
            if(lvl[e.to] != lvl[v] + 1 or !e.cap) continue;
            if(F b = dfs(e.to,t,min(f,e.cap))) {
                e.cap -= b,adj[e.to][e.rev].cap += b;
                return b;
            }
        }
        return 0;
    }
    F maxFlow(int s,int t) {
        F mf = 0;
        while(bfs(s,t)) while(F b = dfs(s,t,numeric_limits<F>::max())) mf += b;
        return mf;
    }
};

endsnippet
# ------------------------------------------------------------------------------------------------------------------------

# Misc 

snippet int128 "I/O support for 128 bit integer"
istream &operator>>(istream &is, __int128_t &x) {
    string s; is >> s;
    int f = 1;
    if(s[0] == '-'){
        f = -1;
        s.erase(begin(s));
    }
    x = 0;
    for(auto& c : s) x = x * 10 + (c - '0');
    x *= f;
    return is;
}

ostream &operator<<(ostream &os, __int128_t x) {
    if (x < 0) {
        os << '-';
        x = -x;
    }
    string s;
    do { s += '0' + static_cast<int>(x % 10); } while (x /= 10);
    reverse(begin(s),end(s));
    return (os << s);
}

using Int = __int128_t;

endsnippet


snippet div "Floor and Ceil division considering negative numbers"
template<class T>
T divFloor(T a, T b) {
	return a / b - (((a ^ b) < 0 && a % b != 0) ? 1 : 0);
} 
template<class T>
T divCeil(T a, T b) {
	return a / b + (((a ^ b) > 0 && a % b != 0) ? 1 : 0);
}

endsnippet
